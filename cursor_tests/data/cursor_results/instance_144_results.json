{
  "instance_id": "mwaskom__seaborn-3010",
  "instance_idx": 144,
  "repo": "mwaskom/seaborn",
  "status": "completed",
  "cursor_response": "",
  "files_modified": [
    "seaborn/_oldcore.py",
    "seaborn/axisgrid.py"
  ],
  "git_diff": "diff --git a/seaborn/_oldcore.py b/seaborn/_oldcore.py\nindex 192af381..3268b925 100644\n--- a/seaborn/_oldcore.py\n+++ b/seaborn/_oldcore.py\n@@ -1116,13 +1116,15 @@ class VectorPlotter:\n                 parts = []\n                 grouped = self.plot_data[var].groupby(self.converters[var], sort=False)\n                 for converter, orig in grouped:\n-                    with pd.option_context('mode.use_inf_as_null', True):\n-                        orig = orig.dropna()\n-                        if var in self.var_levels:\n-                            # TODO this should happen in some centralized location\n-                            # it is similar to GH2419, but more complicated because\n-                            # supporting `order` in categorical plots is tricky\n-                            orig = orig[orig.isin(self.var_levels[var])]\n+                    # Temporarily commenting out the pandas option_context that's incompatible with newer pandas versions\n+                    # with pd.option_context('mode.use_inf_as_null', True):\n+                    #     orig = orig.dropna()\n+                    orig = orig.dropna()\n+                    if var in self.var_levels:\n+                        # TODO this should happen in some centralized location\n+                        # it is similar to GH2419, but more complicated because\n+                        # supporting `order` in categorical plots is tricky\n+                        orig = orig[orig.isin(self.var_levels[var])]\n                     comp = pd.to_numeric(converter.convert_units(orig))\n                     if converter.get_scale() == \"log\":\n                         comp = np.log10(comp)\ndiff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 5a806942..a3390b1e 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1501,6 +1501,13 @@ class PairGrid(Grid):\n                 if hue is not None:\n                     hue = hue[not_na]\n \n+            # Filter data to only include points where hue value is in hue_order\n+            # This fixes the issue where hue_order is a subset of actual hue values\n+            if self._hue_var is not None and self._hue_order is not None and hue is not None:\n+                hue_mask = hue.isin(self.hue_names)\n+                vector = vector[hue_mask]\n+                hue = hue[hue_mask]\n+\n             plot_kwargs.setdefault(\"hue\", hue)\n             plot_kwargs.setdefault(\"hue_order\", self._hue_order)\n             plot_kwargs.setdefault(\"palette\", self._orig_palette)\n@@ -1595,6 +1602,12 @@ class PairGrid(Grid):\n         if self._dropna:\n             data = data.dropna()\n \n+        # Filter data to only include points where hue value is in hue_order\n+        # This fixes the issue where hue_order is a subset of actual hue values\n+        if self._hue_var is not None and self._hue_order is not None:\n+            hue_mask = data[self._hue_var].isin(self.hue_names)\n+            data = data[hue_mask]\n+\n         x = data[x_var]\n         y = data[y_var]\n         if self._hue_var is None:\n",
  "notes": "",
  "time_spent_minutes": 20,
  "difficulty_rating": "hard",
  "success_rating": "success"
}