{
  "instance_id": "django__django-11019",
  "instance_idx": 9,
  "repo": "django/django",
  "status": "completed",
  "cursor_response": "",
  "files_modified": [
    "django/db/models/sql/compiler.py"
  ],
  "git_diff": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 626d095624..9f97b14f18 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -356,7 +356,9 @@ class SQLCompiler:\n             # not taken into account so we strip it. When this entire method\n             # is refactored into expressions, then we can check each part as we\n             # generate it.\n-            without_ordering = self.ordering_parts.search(sql).group(1)\n+            # Normalize multiline SQL to single line to properly match ordering parts\n+            sql_oneline = ' '.join(sql.split())\n+            without_ordering = self.ordering_parts.search(sql_oneline).group(1)\n             if (without_ordering, tuple(params)) in seen:\n                 continue\n             seen.add((without_ordering, tuple(params)))\n@@ -368,7 +370,9 @@ class SQLCompiler:\n         if self.query.distinct and not self.query.distinct_fields:\n             select_sql = [t[1] for t in select]\n             for expr, (sql, params, is_ref) in order_by:\n-                without_ordering = self.ordering_parts.search(sql).group(1)\n+                # Normalize multiline SQL to single line to properly match ordering parts\n+                sql_oneline = ' '.join(sql.split())\n+                without_ordering = self.ordering_parts.search(sql_oneline).group(1)\n                 if not is_ref and (without_ordering, params) not in select_sql:\n                     extra_select.append((expr, (without_ordering, params), None))\n         return extra_select\n",
  "notes": "",
  "time_spent_minutes": 15,
  "difficulty_rating": "medium",
  "success_rating": "success"
}